<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- org.ozea.user.mapper.UserMapper 인터페이스와 매핑되는 MyBatis 매퍼 파일입니다. -->
<mapper namespace="org.ozea.user.mapper.UserMapper">

    <select id="findById" parameterType="java.util.UUID" resultType="org.ozea.user.domain.User">
        SELECT
            user_id,
            name,
            email,
            password,
            mbti,
            phone_num,
            birth_date,
            sex,
            salary,
            pay_amount,
            role,
            kakao_access_token
        FROM USER
        WHERE user_id = #{userId, jdbcType=BINARY, javaType=java.util.UUID}
    </select>

    <!-- 이메일을 기준으로 사용자 정보를 조회하는 SQL 쿼리입니다. -->
    <select id="getUserByEmail" parameterType="String" resultType="org.ozea.user.domain.User">
        SELECT
            user_id,
            name,
            email,
            password,
            mbti,
            phone_num,
            birth_date,
            sex,
            salary,
            pay_amount,
            role,
            kakao_access_token
        FROM USER
        WHERE email = #{email}
    </select>

    <!-- 새로운 사용자 정보를 데이터베이스에 삽입하는 SQL 쿼리입니다. -->
    <insert id="insertUser" parameterType="org.ozea.user.domain.User">
        INSERT INTO USER(user_id,
                         email,
                         name,
                         password,
                         mbti,
                         phone_num,
                         birth_date,
                         sex,
                         salary,
                         pay_amount,
                         role,
                         kakao_access_token)
        VALUES (#{userId, jdbcType=BINARY, javaType=java.util.UUID},
                #{email, jdbcType=VARCHAR},
                #{name, jdbcType=VARCHAR},
                #{password, jdbcType=VARCHAR},
                #{mbti, jdbcType=VARCHAR},
                #{phoneNum, jdbcType=VARCHAR},
                #{birthDate, jdbcType=DATE},
                #{sex, jdbcType=VARCHAR},
                #{salary, jdbcType=BIGINT},
                #{payAmount, jdbcType=BIGINT},
                #{role, jdbcType=VARCHAR},
                #{kakaoAccessToken, jdbcType=VARCHAR})
    </insert>

    <insert id="insertUserWithEmail" parameterType="org.ozea.user.domain.User">
        INSERT INTO USER(
            user_id,
            email,
            name,
            password,
            mbti,
            phone_num,
            birth_date,
            sex,
            salary,
            pay_amount,
            role,
            kakao_access_token
        ) VALUES (
            #{userId, jdbcType=BINARY, javaType=java.util.UUID},
            #{email, jdbcType=VARCHAR},
            #{name, jdbcType=VARCHAR},
            #{password, jdbcType=VARCHAR},
            #{mbti, jdbcType=VARCHAR},
            #{phoneNum, jdbcType=VARCHAR},
            #{birthDate, jdbcType=DATE},
            #{sex, jdbcType=VARCHAR},
            #{salary, jdbcType=BIGINT},
            #{payAmount, jdbcType=BIGINT},
            #{role, jdbcType=VARCHAR},
            #{kakaoAccessToken, jdbcType=VARCHAR}
        )
    </insert>

    <update id="updateUser" parameterType="org.ozea.user.domain.User">
        UPDATE USER
        SET name = #{name},
            password = #{password},
            phone_num = #{phoneNum},
            mbti = #{mbti},
            birth_date = #{birthDate},
            sex = #{sex},
            salary = #{salary},
            pay_amount = #{payAmount},
            role = #{role},
            kakao_access_token = #{kakaoAccessToken}
        WHERE user_id = #{userId, jdbcType=BINARY, javaType=java.util.UUID}
    </update>

    <!-- 이메일 중복 확인  -->
    <select id="checkEmail" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 FROM USER WHERE email = #{email}
    </select>
    
    <!-- UUID를 기준으로 사용자를 삭제하는 SQL 쿼리입니다. -->
    <delete id="deleteUser" parameterType="java.util.UUID">
        DELETE FROM USER WHERE user_id = #{userId, jdbcType=BINARY, javaType=java.util.UUID}
    </delete>
    
    <!-- 사용자와 관련된 모든 데이터를 삭제하는 SQL 쿼리입니다. -->
    <delete id="deleteUserData" parameterType="java.util.UUID">
        DELETE FROM USER WHERE user_id = #{userId, jdbcType=BINARY, javaType=java.util.UUID}
    </delete>
    
    <!-- 사용자의 포인트 내역을 삭제합니다. -->
    <delete id="deleteUserPoints" parameterType="java.util.UUID">
        DELETE FROM Point WHERE user_id = #{userId, jdbcType=BINARY, javaType=java.util.UUID}
    </delete>
    
    <!-- 사용자의 목표 정보를 삭제합니다. -->
    <delete id="deleteUserGoals" parameterType="java.util.UUID">
        DELETE FROM Goal WHERE user_id = #{userId, jdbcType=BINARY, javaType=java.util.UUID}
    </delete>
    
    <!-- 사용자의 문의 내역을 삭제합니다. -->
    <delete id="deleteUserInquiries" parameterType="java.util.UUID">
        DELETE FROM Inquiry WHERE user_id = #{userId, jdbcType=BINARY, javaType=java.util.UUID}
    </delete>
</mapper> 